using Google.Protobuf.WellKnownTypes;

namespace WHAL_Int.Maj;

public class srucTable
{
    private List<Coop> trackedCoops = new();

    private const string the_table =
@"Last updated: <t:{0}:R>

`  Coop   | Boosted | Tokens | Duration  | Finish`{1}
`Primary order based off of duration`

*`!!sruc` to summon an update!*
*Note that this is NOT a Wonky command, and was generated by WHAL-Int*";
    private const string bottom_half_of_table = "";

    public srucTable(string contractId, params string[] coopIds)
    {
        foreach (string coopId in coopIds)
        {
            trackedCoops.Add(new Coop(contractId, coopId));
        }
    }

    private string getRows()
    {
       (string, uint, uint, double, double)[] rows = new (string, uint, uint, double, double)[trackedCoops.Count];

        for (int i=0; i<trackedCoops.Count; i++)
        {
            Coop coop = trackedCoops[i];
            rows[i] = (
                $"[â§‰](<https://eicoop-carpet.netlify.app/{coop.ContractId()}/{coop.CoopId()}>)`{coop.StrippedCoopId()} |",
                coop.BoostedCount(),
                coop.TotalTokens(),
                coop.DurationInSeconds(),
                coop.UnixCompletionTime()
            );
        }

        var orderedRows = rows.OrderBy(c => c.Item4)
            .ThenBy(c => c.Item2)
            .ThenBy(c => c.Item3)
            .ThenBy(c => c.Item5)
        ;
        string rowsString = "";
        foreach (var row in orderedRows)
        {
            rowsString += ("\n" + (
                row.Item1.ToString() +
                $"{utils.CenteredString(row.Item2.ToString(), 9)}|" +
                $"{utils.CenteredString(row.Item3.ToString(), 8)}|" +
                $"{utils.CenteredString(utils.SecondsToDuration(row.Item4), 11)}|`" +
                $"<t:{row.Item5}:f>"
            ));
        }
        return rowsString;
    }

    public string GetSrucTable()
    {
        return string.Format(the_table, utils.ConvertToUnixTimestamp(DateTime.UtcNow), getRows());
    }
}
